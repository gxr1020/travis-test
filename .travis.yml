# language: python
# script: true
# # language字段指定了默认运行环境，这里设定使用 Python 环境。
# # script字段指定要运行的脚本【script: true】表示不执行任何脚本，状态直接设为成功。

# language: python
# sudo: required
# before_install: sudo pip install foo
# script: py.test
# # sudo: required --> 需要sudo权限，
# # before_install: sudo pip install foo --> 在安装依赖之前需要安装foo模块
# # script: py.test --> 然后执行脚本py.test。

# Travis 的运行流程很简单，任何项目都会经过两个阶段。
# install 阶段：安装依赖
# script 阶段：运行脚本


# # Node 项目的install和script阶段都有默认脚本，可以省略。
# language: node_js
# node_js:
#     - "8"

# # Node 项目的install和script阶段都有默认脚本，可以省略。
# # install默认值：npm install
# # script默认值：npm test

# script阶段结束以后，还可以设置通知步骤（notification）和部署步骤（deployment），它们不是必须的。


# 比如，要部署到 Github Pages，可以写成下面这样。

# deploy:
#     provider: pages # 操作的是gh-pages分支
#     skip_cleanup: true #通过清理
#     github_token: $GITHUB_TOKEN # Set in travis-ci.org dashboard
#     on:
#         branch: master



# Travis 为上面这些阶段提供了7个钩子。
# before_install：install 阶段之前执行
# before_script：script 阶段之前执行
# after_failure：script 阶段失败时执行
# after_success：script 阶段成功时执行
# before_deploy：deploy 步骤之前执行
# after_deploy：deploy 步骤之后执行
# after_script：script 阶段之后执行
# 完整的生命周期，从开始到结束是下面的流程。
# before_install
# install
# before_script
# script
# aftersuccess or afterfailure
# [OPTIONAL] before_deploy
# [OPTIONAL] deploy
# [OPTIONAL] after_deploy
# after_script
# 下面是一个before_install钩子的例子。

# before_install:
#   - sudo apt-get -qq update
#   - sudo apt-get install -y libxml2-dev


# .travis.yml的env字段可以定义环境变量。

# env:
#   - DB=postgres
#   - SH=bash
#   - PACKAGE_VERSION="1.0.*"



language: node_js
node_js:
    - "8"
script:
